%%%-------------------------------------------------------------------
%%% @author MB-SPARE
%%% @copyright (C) 2015, <COMPANY>
%%% @doc
%%%
%%% @end
%%% Created : 19. Nov 2015 5:48 PM
%%%-------------------------------------------------------------------
-module(cquery_builder).
-author("alituhikyaj").

-include("../include/chapchap_app_common.hrl").
-include("../deps/authenticator/include/usr.hrl").

%% Queries
-export([
  batch_insert_from_transaction/1,
%%   update_counter/1,
  batch_insert_from_request/1,
  read_transaction_by_id/1,
  read_customer_by_phone_number/1,
  read_agent_by_phone_number/1,
  batch_insert_from_agent/1,
  batch_insert_from_customer/1,
  read_request_by_id/1,
  insert_child/1,
  update_child_count/1,
  update_agents_customer_count/1,
  insert_agents_customer/1,
  update_accounts/1,
  get_account_total/1

]).


%%-----------------------------
%% @doc this will return the insert statement and values for a transactions
%% it returns a list of tuples of the form {Statement, Values}
%%-------------------------------
-spec(batch_insert_from_transaction(Transaction :: #chapchap_transaction{}) ->List :: list()).
batch_insert_from_transaction(Transaction = #chapchap_transaction{args_list = _ArgsList}) ->
  {TimestampNow, _TimestampToday, TimestampMonth, _TimestampYear} = util:getTimeAndDay(),

  Trace = case Transaction#chapchap_transaction.trace of
            undefined -> undefined;
            Else -> util:convert_term_to_string(Else)

          end,
  Message = case Transaction#chapchap_transaction.message of
              undefined -> undefined;
              Else1 -> util:convert_term_to_string(Else1)

            end,
  Amount = case Transaction#chapchap_transaction.amount of
             undefined -> undefined;
             Binary when is_binary(Binary) ->
                 util:convert_binary_to_float_attempt(Binary);
             Integer when is_integer(Integer) -> Integer;
             Float when is_float(Float) -> Float;
             _ -> undefined

           end,
  ApiUser = util:get_user(Transaction#chapchap_transaction.api_user),
  Processor =  Transaction#chapchap_transaction.processor_name,

  CustomerPhoneNumber = validator:replace_white_space(Transaction#chapchap_transaction.customer_phone_number),
  AgentPhoneNumber =  validator:replace_white_space(Transaction#chapchap_transaction.agent_phone_number),
  RawParams = [
    {transaction_id ,Transaction#chapchap_transaction.transaction_id },
    {process_step , Transaction#chapchap_transaction.process_step},
    {name, Transaction#chapchap_transaction.name},
    {agent_phone_number, AgentPhoneNumber},
    {customer_phone_number, CustomerPhoneNumber},
    {args_list,Transaction#chapchap_transaction.args_list},
    {state,Transaction#chapchap_transaction.state},
    {operation,Transaction#chapchap_transaction.operation},
    {receipt_id,Transaction#chapchap_transaction.receipt_id},
    {commission,Transaction#chapchap_transaction.commission},
    {agent_level, Transaction#chapchap_transaction.agent_level},
    {time, TimestampNow},
    {trace, Trace},
    {message, Message},
    {service_provider_id,Transaction#chapchap_transaction.service_provider_id},
    {amount,Amount},
    {type ,Transaction#chapchap_transaction.type},
    {retry_count, Transaction#chapchap_transaction.retry_count},
    {max_retry_count , Transaction#chapchap_transaction.retry_count},
    {currency,Transaction#chapchap_transaction.currency},
    {processor,Processor},
    {api_user, ApiUser},
    {api_user_type,Transaction#chapchap_transaction.api_user_type},
    {network,Transaction#chapchap_transaction.network}


  ],
  Params = [{Key, Value} || {Key, Value} <- RawParams, Value /= undefined],
  Values = [Value || {_Key, Value} <- Params],
  Names = list_util:drop_last(lists:flatten([util:atom_to_string(Key) ++ "," || {Key, _Value} <- Params])),
  QuestionMarks = get_question_marks(length(Values)),
  {ParamsBucket, _ValuesBucket, NamesBucket, QuestionMarksBucket} = add_bucket(TimestampMonth, Params, Values, Names, QuestionMarks),

  [
    {"INSERT INTO transaction_by_id(" ++ Names ++ ") VALUES (" ++ QuestionMarks ++ ");", Params},
    {"INSERT INTO transaction_by_service_provider(" ++ NamesBucket ++ ") VALUES (" ++ QuestionMarksBucket ++ ");", ParamsBucket},
    {"INSERT INTO transaction_by_state(" ++ NamesBucket ++ ") VALUES (" ++ QuestionMarksBucket ++ ");", ParamsBucket},
    {"INSERT INTO transaction_by_agent(" ++ NamesBucket ++ ") VALUES (" ++ QuestionMarksBucket ++ ");", ParamsBucket},
    {"INSERT INTO transaction_by_customer(" ++ NamesBucket ++ ") VALUES (" ++ QuestionMarksBucket ++ ");", ParamsBucket}
  ].

batch_insert_from_request(Request) ->
  {TimestampNow, _TimestampToday, TimestampMonth, _TimestampYear} = util:getTimeAndDay(),
  Trace = case Request#chapchap_request.trace of
            undefined -> undefined;
            Else -> lists:flatten(io_lib:format("~p", [Else]))

          end,
  Message = case Request#chapchap_request.message of
              undefined -> undefined;
              Else1 -> lists:flatten(io_lib:format("~p", [Else1]))
             end,
  ApiUser = util:get_user(Request#chapchap_request.api_user),

  RawParams = [
    {id,Request#chapchap_request.id},
    {args_list, Request#chapchap_request.args_list},
    {api_user, ApiUser},
    {retry_count, Request#chapchap_request.retry_count},
    {max_retry_count, Request#chapchap_request.max_retry_count},
    {trace, Trace},
    {state,Request#chapchap_request.state},
    {message, Message},
    {time, TimestampNow},
    {operation, Request#chapchap_request.operation},
    {type, Request#chapchap_request.type},
    {process_step, Request#chapchap_request.process_step},
    {processor, Request#chapchap_request.processor_name},
    {name, Request#chapchap_request.name},
    {api_user_type,Request#chapchap_request.api_user_type}

  ],
  Params = [{Key, Value} || {Key, Value} <- RawParams, Value /= undefined],
  Values = [Value || {_Key, Value} <- Params],
  Names = list_util:drop_last(lists:flatten([util:atom_to_string(Key) ++ "," || {Key, _Value} <- Params])),
  QuestionMarks = get_question_marks(length(Values)),
  {ParamsBucket, _ValuesBucket, NamesBucket, QuestionMarksBucket} = add_bucket(TimestampMonth, Params, Values, Names, QuestionMarks),
  [
    {"INSERT INTO request_by_id(" ++ Names ++ ") VALUES (" ++ QuestionMarks ++ ");",Params},
    {"INSERT INTO request_by_name(" ++ NamesBucket ++ ") VALUES (" ++ QuestionMarksBucket ++ ");",ParamsBucket}
  ].

batch_insert_from_agent(Agent)->
  {_TimestampNow, _TimestampToday, _TimestampMonth, TimestampYear} = util:getTimeAndDay(),
  RawParams = get_agent_params(Agent),
  Params = [{Key, Value} || {Key, Value} <- RawParams, Value /= undefined],
  Values = [Value || {_Key, Value} <- Params],
  Names = list_util:drop_last(lists:flatten([util:atom_to_string(Key) ++ "," || {Key, _Value} <- Params])),
  QuestionMarks = get_question_marks(length(Values)),
  {ParamsBucket, _ValuesBucket, NamesBucket, QuestionMarksBucket} = add_bucket(TimestampYear, Params, Values, Names, QuestionMarks),
  [
    {"INSERT INTO agent_by_phone_number(" ++ Names ++ ") VALUES (" ++ QuestionMarks ++ ");",Params},
    {"INSERT INTO agent_by_country(" ++ NamesBucket ++ ") VALUES (" ++ QuestionMarksBucket ++ ");",ParamsBucket}
  ].

insert_child(Agent)->
  {_TimestampNow, _TimestampToday, _TimestampMonth, TimestampYear} = util:getTimeAndDay(),
  RawParams = [{agent_level,Agent#agent.agent_level}|get_agent_params(Agent)],
  Params = [{Key, Value} || {Key, Value} <- RawParams, Value /= undefined],
  Values = [Value || {_Key, Value} <- Params],
  Names = list_util:drop_last(lists:flatten([util:atom_to_string(Key) ++ "," || {Key, _Value} <- Params])),
  QuestionMarks = get_question_marks(length(Values)),
  {ParamsBucket, _ValuesBucket, NamesBucket, QuestionMarksBucket} = add_bucket(TimestampYear, Params, Values, Names, QuestionMarks),
    {"INSERT INTO child_by_agent_by_level(" ++ NamesBucket ++ ") VALUES (" ++ QuestionMarksBucket ++ ");",ParamsBucket}.

update_child_count(Agent)->
    {"UPDATE child_count_by_agent_by_level SET total = total + 1 WHERE parent_phone_number=? and agent_level=?",
      [{parent_phone_number,Agent#agent.parent_phone_number},{agent_level,Agent#agent.agent_level}]}.

batch_insert_from_customer(Customer)->
  {_TimestampNow, _TimestampToday, _TimestampMonth, TimestampYear} = util:getTimeAndDay(),
  RawParams =get_customer_params(Customer),
  Params = [{Key, Value} || {Key, Value} <- RawParams, Value /= undefined],
  Values = [Value || {_Key, Value} <- Params],
  Names = list_util:drop_last(lists:flatten([util:atom_to_string(Key) ++ "," || {Key, _Value} <- Params])),
  QuestionMarks = get_question_marks(length(Values)),
  {ParamsBucket, _ValuesBucket, NamesBucket, QuestionMarksBucket} = add_bucket(TimestampYear, Params, Values, Names, QuestionMarks),
  [
    {"INSERT INTO customer_by_phone_number(" ++ Names ++ ") VALUES (" ++ QuestionMarks ++ ");",Params},
    {"INSERT INTO customer_by_country(" ++ NamesBucket ++ ") VALUES (" ++ QuestionMarksBucket ++ ");",ParamsBucket}
  ].


insert_agents_customer(Customer)->
{_TimestampNow, _TimestampToday, _TimestampMonth, TimestampYear} = util:getTimeAndDay(),
RawParams = [{agent_level,Customer#customer.agent_level}|get_customer_params(Customer)],
Params = [{Key, Value} || {Key, Value} <- RawParams, Value /= undefined],
Values = [Value || {_Key, Value} <- Params],
Names = list_util:drop_last(lists:flatten([util:atom_to_string(Key) ++ "," || {Key, _Value} <- Params])),
QuestionMarks = get_question_marks(length(Values)),
{ParamsBucket, _ValuesBucket, NamesBucket, QuestionMarksBucket} = add_bucket(TimestampYear, Params, Values, Names, QuestionMarks),
{"INSERT INTO customer_by_agent_by_level(" ++ NamesBucket ++ ") VALUES (" ++ QuestionMarksBucket ++ ");",ParamsBucket}.

update_agents_customer_count(Customer)->
    {"UPDATE customer_count_by_agent SET total = total + 1 WHERE agent_phone_number=? and agent_level=?",
      [{agent_phone_number,Customer#customer.agent_phone_number},{agent_level,Customer#customer.agent_level}]}.

read_transaction_by_id(Transaction)->
  {"SELECT * FROM transaction_by_id WHERE transaction_id = ?",
    [{transaction_id,Transaction#chapchap_transaction.transaction_id}]}.

read_request_by_id(Request)->
  {"SELECT * FROM request_by_id WHERE id = ?",
    [{id,Request#chapchap_request.id}]}.

read_customer_by_phone_number(Customer)->
  {"SELECT * FROM customer_by_phone_number WHERE customer_phone_number = ?",
  [{customer_phone_number,Customer#customer.customer_phone_number}]
  }.

read_agent_by_phone_number(Agent)->
  {"SELECT * FROM agent_by_phone_number WHERE agent_phone_number = ?",
    [{agent_phone_number,Agent#agent.agent_phone_number}]
  }.

update_accounts(AccountActions) ->
  [ {"UPDATE account SET total = total + ? WHERE account_number=? and account_type=?",
    [{total,Amount},{account_number,AccountNumber},{account_type,AccountType}]}
  || #account_action{amount = Amount,account_type = AccountType, account_number = AccountNumber} <- AccountActions].

get_account_total(#account_action{account_number = AccountNumber ,account_type = AccountType})->
{"SELECT total FROM account WHERE account_number = ? and account_type=?",
[{account_number,AccountNumber},{account_type,AccountType}]
}.


%%%==============================================
%%% INTERNAL FUNCTIONS
%%%===============================================
get_question_marks(Number) ->
  list_util:drop_last(lists:flatten(list_util:duplicate("?,", Number))).

%% @doc will add the bucket to params, values,names and question marks
%% and will return them in that order
add_bucket(BucketValue, Params, Values, Names, QuestionMarks) ->
  {[{bucket, BucketValue} | Params], [BucketValue | Values], "bucket," ++ Names, QuestionMarks ++ ",?"}.

get_agent_params(Agent)->
  [
    {agent_phone_number, Agent#agent.agent_phone_number},
    {parent_phone_number, Agent#agent.parent_phone_number},
    {parent_set, Agent#agent.parent_set},
    {national_id, Agent#agent.national_id},
    {first_name, Agent#agent.first_name},
    {last_name, Agent#agent.last_name},
    {date_of_birth,Agent#agent.date_of_birth},
    {password, Agent#agent.password},
    {security_question,Agent#agent.security_question},
    {security_answer,Agent#agent.security_answer},
    {next_of_kin_name,Agent#agent.next_of_kin_name},
    {next_of_kin_relation,Agent#agent.next_of_kin_relation},
    {next_of_kin_phone_number,Agent#agent.next_of_kin_phone_number},
    {gender,Agent#agent.gender},
    {email, Agent#agent.email},
    {country,Agent#agent.country},
    {activated,Agent#agent.activated},
    {blocked,Agent#agent.blocked},
    {network, Agent#agent.network},
    {middle_name,Agent#agent.middle_name},
    {district,Agent#agent.district},
    {city,Agent#agent.city},
    {licensed, Agent#agent.licensed}
  ].

get_customer_params(Customer)->
 [
{customer_phone_number,Customer#customer.customer_phone_number},
{agent_phone_number,Customer#customer.agent_phone_number},
{agent_set, Customer#customer.agent_set},
{password, Customer#customer.password},
{security_question,Customer#customer.security_question},
{security_answer,Customer#customer.security_answer},
{first_name, Customer#customer.first_name},
{last_name, Customer#customer.last_name},
{email, Customer#customer.email},
{country,Customer#customer.country},
{activated,Customer#customer.activated},
{blocked,Customer#customer.blocked},
{network, Customer#customer.network},
{middle_name,Customer#customer.middle_name},
{district,Customer#customer.district},
{city,Customer#customer.city}
].

