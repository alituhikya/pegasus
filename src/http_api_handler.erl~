%%%-------------------------------------------------------------------
%%% @author alituhikyaj
%%% @copyright (C) 2015, <COMPANY>
%%% @doc
%%%
%%% @end
%%% Created : 16. Jun 2015 10:38 PM
%%%-------------------------------------------------------------------
-module(http_api_handler).
-author("alituhikyaj").

%-behaviour(cowboy_http_handler).

-export([init/3]).
%-export([handle/2]).
%-export([handle/2, terminate/3]).
-export([content_types_provided/2, allowed_methods/2, content_types_accepted/2]).
-export([to_json/2]).
-export([to_text/2]).
-export([from_html/2]).
-export([from_json/2]).
-include("../include/pension_app_common.hrl").
-include("../deps/authenticator/include/usr.hrl").

%% -record(http_state, {
%% }).

init({tcp, http}, _Req, _Opts) ->
  {upgrade, protocol, cowboy_rest}.



content_types_provided(Req, State) ->
  {[
    {<<"text/html">>, to_text},
    {<<"application/json">>, to_json},
    {<<"text/plain">>, to_text}
  ], Req, State}.
content_types_accepted(Req, State) ->
  {[{{<<"application">>, <<"x-www-form-urlencoded">>, []}, to_text},
    {{<<"application">>, <<"json">>, []}, to_json}
  ],
    Req, State}.
from_html(Req, State) ->
  {{true, <<"/">>}, Req, State}.
from_json(Req, State) ->
  {{true, <<"/">>}, Req, State}.

allowed_methods(Req, State) ->
  {[
    <<"GET">>, <<"HEAD">>, <<"OPTIONS">>, <<"POST">>
  ], Req, State}.


to_json(Req, State) ->
  Req3 =
    case get_parameter_list(Req) of
      {error, Reason} ->  cowboy_req:set_resp_body(pension_request_return:error(Reason),Req);
      {ok,[{ParameterList,true}],Req2} ->
        io:format("0: \t~p~n", [ParameterList]),
        process_req(jsx:decode(ParameterList),Req2)
    end ,
  {true, Req3, State}.

to_text(Req, State) ->
  Req3 =
    case get_parameter_list(Req) of
      {error, Reason} ->  cowboy_req:set_resp_body(pension_request_return:error(Reason),Req);
      {ok,ParameterList,Req2} ->
        io:format("0: \t~p~n", [ParameterList]),
        process_req(ParameterList,Req2)
    end,
  {true, Req3, State}.

%%---------------------------------------------------------------------------
%% %% %% %% %% %% %%  INTERNAL FUNCTIONS  %% %% %% %% %% %%
%%----------------------------------------------------------------------------

get_parameter_list(Req)->
  case cowboy_req:body_qs(Req) of
    {error, Reason} -> io:format("Error:\t~p~n", [Reason]), {error, atom_to_binary(Reason, utf8)};
    {badlength, _Req2} -> {error, ?BAD_LENGTH_ERROR_MESSAGE};
    {ok, ParameterList, Req2} -> {ok,ParameterList,Req2}
  end.

process_req(ParameterList,Req2) ->
  case http_auth:perform_auth(Req2) of
    {ok, Usr} ->
      case {cowboy_req:binding(operation,Req2),cowboy_req:binding(processor,Req2)} of
        {{Operation,_Req},{Processor,_Req}} ->
          {Archiver,_Req} = get_archiver_type(cowboy_req:binding(type,Req2)),
          ProcessorAtom = binary_to_atom(Processor, utf8) ,
          OperationAtom = binary_to_atom(Operation,utf8),
          PensionRequestReturn =  transaction_handler:process_transaction(
            #pension_transaction{archiver = Archiver,args_list = ParameterList, api_user = Usr, processor = fun transaction_handler:ProcessorAtom/1,operation = OperationAtom}) ,
          io:format("0: \t~p~n", [PensionRequestReturn]),
          cowboy_req:set_resp_body(pension_request_return:process(PensionRequestReturn), Req2);
        _->
          Error = <<"error in url">>,
          io:format("Error: \t~p~n", [Error]),
          Response = pension_request_return:process(Error),
          cowboy_req:set_resp_body(Response, Req2)
      end;

    {error, Error} ->
      io:format("Error: \t~p~n", [Error]),
      Response = pension_request_return:process(Error),
      Req3= cowboy_req:set_resp_header(<<"Www-Authenticate">>, <<"Basic realm=\"Secure Area\"">>, Req2),
      cowboy_req:set_resp_body(Response, Req3)

  end.
get_archiver_type(Type)->
TypeBinary = binary_to_atom(Type,utf8),
  case TypeBinary of
    query ->
      archive_query;
    web ->
      archive_query;
    transaction ->
      archive
  end.
