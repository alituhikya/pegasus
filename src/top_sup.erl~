%%%-------------------------------------------------------------------
%%% @author alituhikyaj
%%% @copyright (C) 2015, <COMPANY>
%%% @doc
%%%
%%% @end
%%% Created : 01. Feb 2015 8:49 AM
%%%-------------------------------------------------------------------
-module(top_sup).
-author("alituhikyaj").

-behaviour(supervisor).

%% API
-export([start_link/0,custom_404_hook/4]).

%% Supervisor callbacks
-export([init/1]).

-define(SERVER, {global,?MODULE}).
-include("../include/pension_app_common.hrl").

%%%===================================================================
%%% API functions
%%%===================================================================

%%--------------------------------------------------------------------
%% @doc
%% Starts the supervisor
%%
%% @end
%%--------------------------------------------------------------------
-spec(start_link() ->
  {ok, Pid :: pid()} | ignore | {error, Reason :: term()}).
start_link() ->
  supervisor:start_link(?SERVER, ?MODULE, []).

%%%===================================================================
%%% Supervisor callbacks
%%%===================================================================

%%--------------------------------------------------------------------
%% @private
%% @doc
%% Whenever a supervisor is started using supervisor:start_link/[2,3],
%% this function is called by the new process to find out about
%% restart strategy, maximum restart frequency and child
%% specifications.
%% this also starts web server
%% @todo make port environment variable
%%
%% @end
%%--------------------------------------------------------------------
-spec(init(Args :: term()) ->
  {ok, {SupFlags :: {RestartStrategy :: supervisor:strategy(),
    MaxR :: non_neg_integer(), MaxT :: non_neg_integer()},
    [ChildSpec :: supervisor:child_spec()]
  }} |
  ignore |
  {error, Reason :: term()}).
init([]) ->
  RestartStrategy = one_for_one,
  MaxRestarts = 1000,
  MaxSecondsBetweenRestarts = 3600,

  SupFlags = {RestartStrategy, MaxRestarts, MaxSecondsBetweenRestarts},

  Restart = permanent,
  Shutdown = 2000,
  _Type = worker,
  TypeSuper = supervisor,


  TransactionSup = {?TRANSACTION_SUPERVISOR_NAME, {transaction_sup, start_link, []},
    Restart, Shutdown, TypeSuper, [transaction_sup]},
  ArchiverSup = {?TRASACTION_ARCHIVER_SUP_NAME, {transaction_archiver_sup, start_link, []},
    Restart, Shutdown, TypeSuper, [transaction_archiver_sup]},
  {ok, Port} = application:get_env(http_port),
  Dispatch = cowboy_router:compile([
    {'_', [
             {<<"/api/:processor/:operation">>, http_api_handler, []},
             {<<"/make-payment">>, make_payment_http_handler, []},
             {<<"/payment-return">>, payment_return_http_handler, []}
%%   ,
%%           {<<"/admin/[...]">>, cowboy_static, {priv_dir, pension, "index.html",[{mimetypes, cow_mimetypes, all}]}}
%%      ,
%%              {<<"admin/[...]">>, cowboy_static,
%%                {
%%                  priv_dir, static_world, "",
%%                  [
%%                    {mimetypes, cow_mimetypes, all}
%%                  ]
%%                }
%%              }
          ]
    }
  ]),
  io:format("Starting Cowboy Server ~p ~n", [Port]),
  {ok, _} = cowboy:start_http(http, 100,
    [{port, Port}],
    [
      {env, [{dispatch, Dispatch}]},
      {onresponse, fun ?MODULE:custom_404_hook/4}
    ]),

  {ok, {SupFlags, [TransactionSup, ArchiverSup]}}.


%%%===================================================================
%%% Internal functions
%%%===================================================================

%% app.erl
custom_404_hook(404, Headers, <<>>, Req) ->
  % Assuming index.html is at priv/app/index.html
  {PathThe,_} = cowboy_req:path(Req),
  io:format("The path: \t~p~n", [PathThe]),
  Path = case PathThe of
         <<"/">>  ->  filename:absname("app/index.html", code:priv_dir(?APP_NAME));
           PathReturned when is_binary(PathReturned)-> filename:absname("app/", code:priv_dir(?APP_NAME))++ binary_to_list(PathReturned)
         end,
  {ok, Body} = file:read_file(Path),
  Headers2 = lists:keyreplace(
    <<"content-length">>, 1, Headers,
    {<<"content-length">>, integer_to_list(byte_size(Body))}),
  Headers3 = lists:keyreplace(<<"content-type">>, 1, Headers2,{<<"content-type">>, <<"text/html">>}),
  {ok, Req2} = cowboy_req:reply(200, Headers3, Body, Req),
  Req2;
custom_404_hook(_, _, _, Req) ->
  Req.


%% dispatch_rules() ->
%%   cowboy_router:compile(
%%     %% {Host, list({Path, Handler, Opts})}
%%     [{'_', [
%%       {["/"], cowboy_static, [
%%         {mimetypes, {fun mimetypes:path_to_mimes/2, default}}]},
%%       {'_', nitrogen_cowboy, []}
%%     ]}]).
