%%%-------------------------------------------------------------------
%%% @author mb-spare
%%% @copyright (C) 2016, <COMPANY>
%%% @doc
%%%
%%% @end
%%% Created : 10. May 2016 5:24 PM
%%%-------------------------------------------------------------------
-module(util).
-author("mb-spare").

-include("../include/chapchap_app_common.hrl").
-include("../deps/authenticator/include/usr.hrl").
%% API
-export([getTimeStamps/0,
  atom_to_string/1,
  get_user/1,
  convert_binary_to_float_or_integer/2,
  convert_term_to_string/1,
  round_up_float/2,
  get_record/2,
  agent/1,
  customer/1,
  chapchap_transaction/1,
  chapchap_request/1,
  account_action/1,
  convert_list_to_float_or_integer/2
]).

%%------------------------------------------------
%% @doc
%% <p> Returns timestamps of current time, day, month and year</p>
%% @end
%%---------------------------------------------------
-spec(getTimeStamps()-> {TimestampNow :: integer(), TimestampToday :: integer(), TimestampMonth :: integer(), TimestampYear :: integer()}).
getTimeStamps() ->
  TimeNow = os:timestamp(),
  {Today, Now} = calendar:now_to_universal_time(TimeNow),
  {Year, Month, _Day} = Today,
  TimestampNow = calendar:datetime_to_gregorian_seconds({Today, Now}) - 62167219200,
  TimestampToday = calendar:datetime_to_gregorian_seconds({Today, {0, 0, 0}}) - 62167219200,
  TimestampMonth = calendar:datetime_to_gregorian_seconds({{Year, Month, 1}, {0, 0, 0}}) - 62167219200,
  TimestampYear = calendar:datetime_to_gregorian_seconds({{Year, 1, 1}, {0, 0, 0}}) - 62167219200,
  {TimestampNow, TimestampToday, TimestampMonth, TimestampYear}.

%%------------------------------------------------
%% @doc
%% <p> Converts an atom to a string</p>
%% @end
%%---------------------------------------------------
-spec(atom_to_string(atom())-> string()).
atom_to_string(Atom) ->
  R = io_lib:format("~p", [Atom]),
  lists:flatten(R).

%%------------------------------------------------
%% @doc
%% <p>Returns a users unique identifier from
%% either a usr record or a customer record or an agent record orlse it returns unknown</p>
%% @end
%%---------------------------------------------------
-spec(get_user(Record :: term())-> string() | binary()).
get_user(#usr{auth_name = ApiUser}) when ApiUser =/= undefined->
  ApiUser;
get_user(#customer{customer_phone_number = ApiUser})when ApiUser =/= undefined->
  ApiUser;
get_user(#agent{agent_phone_number = ApiUser})when ApiUser =/= undefined->
  ApiUser;
get_user(ApiUser)when is_atom(ApiUser) orelse is_binary(ApiUser) orelse is_list(ApiUser)->
  ApiUser;
get_user(_)->
  unknown.


%%------------------------------------------------
%% @doc
%% <p>Attempts to convert a binary to float or integer string orelse runs a callback function IfFailed </p>
%% @end
%%---------------------------------------------------
-spec(convert_binary_to_float_or_integer(Binary :: binary(), IfFailed :: function())-> integer() | float() | undefined).
convert_binary_to_float_or_integer(Binary,IfFailed) when is_binary(Binary)->
  try binary_to_integer(Binary)
  catch
    _X:badarg ->
      try binary_to_float(Binary)
      catch
        S:Y -> IfFailed(Binary,S,Y)
      end
  end.
%%------------------------------------------------
%% @doc
%% <p>Attempts to convert a list to float or integer string orelse runs a callback function IfFailed </p>
%% @end
%%---------------------------------------------------
-spec(convert_list_to_float_or_integer(Binary :: binary(), IfFailed :: function())-> integer() | float() | undefined).
convert_list_to_float_or_integer(List,IfFailed) when is_list(List)->
  try list_to_integer(List)
  catch
    _X:badarg ->
      try list_to_float(List)
      catch
        S:Y -> IfFailed(List,S,Y)
      end
  end.

%%------------------------------------------------
%% @doc
%% <p>Converts any term to a string </p>
%% @end
%%---------------------------------------------------
-spec(convert_term_to_string(Term :: term())->string()).
convert_term_to_string(Term)->
  lists:flatten(io_lib:format("~p", [Term])).

%%------------------------------------------------
%% @doc
%% <p>Rounds up a float to the precision provided </p>
%% <p>Precion is an integer that specifies how may decimal points</p>
%% @end
%%---------------------------------------------------
-spec(round_up_float(Float :: float(),NumberOfDecimalPoints :: integer())->float()).
round_up_float(Float,NumberOfDecimalPoints)->
  Precision = NumberOfDecimalPoints * 10,
  round(Float*Precision)/Precision.

%%----------------------------------
%% @doc
%% gets what record it is from the list provided else returns unknown
%%---------------------------------------------
-spec(get_record(Record :: term(),list())-> atom() | unknown).
get_record(_,[])->
  unknown;
get_record(Record,[H|T])->
  case H(Record) of
    true -> H;
    false -> get_record(Record,T)
  end.


agent(Record) when is_record(Record,agent)->
  true;
agent(_)->
  false.

customer(Record) when is_record(Record,customer) ->
  true;
customer(_)->
  false.

account_action(Record) when is_record(Record,account_action) ->
  true;
account_action(_)->
  false.

chapchap_transaction(Record) when is_record(Record,chapchap_transaction) ->
  true;
chapchap_transaction(_)->
  false.

chapchap_request(Record) when is_record(Record,chapchap_request) ->
  true;
chapchap_request(_)->
  false.

